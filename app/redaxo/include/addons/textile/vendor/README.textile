h1. Textile for PHP

"Downloads":https://github.com/textile/php-textile/releases | "Textile reference":http://txstyle.org/article/43/a-short-introduction | "Live editor":http://txstyle.org/ | "Packagist":https://packagist.org/packages/netcarver/textile

*Textile is a humane web text generator*. It takes lightweight, readable, plaintext-like markup language and converts it into well formed HTML. This repository contains a Textile parser for PHP.

h2. Branches

|^=. "master":https://github.com/textile/php-textile/tree/master | Has a multi-file, namespaced, "PSR-0/1/2":https://github.com/php-fig/fig-standards/tree/master/accepted compliant version of Textile. Releases from master are tagged v3.5.x !https://travis-ci.org/textile/php-textile.png?branch=master!:https://travis-ci.org/textile/php-textile |^=. _Requires PHP5.3+_ |
|^=. "2.5":https://github.com/textile/php-textile/tree/2.5       | Holds a feature-frozen single-file version of Textile representing the v2.5.x releases. It is *not* PSR-0 compliant but attempts to follow PSR-1 and PSR-2 in other respects.               !https://travis-ci.org/textile/php-textile.png?branch=2.5!:https://travis-ci.org/textile/php-textile    |^=. _Requires PHP5.0+_ |

*This is the README for the 2.5 branch.*

If you want the latest features use the master branch as this branch was feature frozen on 2013-11-06 and only receives security updates.

From time to time other branches may be present in the repository. These represent transient development or hotfix branches and should not be used for live sites/projects.

h2. Installing

h3. Using Composer

The recommended way to install Textile is via "Composer":https://getcomposer.org/ package manager. Navigate to your project directory, and run the command:

bc. $ composer require "netcarver/textile 2.5.*"

Or add it to your project's @composer.json@ file:

bc.. {
    "require": { "netcarver/textile": "2.5.*@dev" }
}

p. If you haven't yet used Composer, you will then want to include the autoloader file generated by Composer in your project:

bc. require './vendor/autoload.php';

h3. Manually

The only file that is necessary for the correct operation of Textile 2.* is @classTextile.php@ from the root directory. "Grab a copy of the latest Textile v2.5.x release":https://github.com/textile/php-textile/releases, extract the archive and include the @classTextile.php@ file in your application:

bc. include "classTextile.php";

h2. Usage

Textile parser can be accessed through the @Textile@ class. The class is highly configurable, and actual parsing happens with the @textileThis@ and @textileRestricted@ methods:

bc. $parser = new Textile();
echo $parser->textileThis('h1. Hello World!');

h3. Parsing untrusted input

If you are using Textile to format user-supplied input, blog comments for instance, use the @textileRestricted()@ method:

bc. $parser = new Textile();
echo $parser->textileRestricted('!bad/image/not/allowed.svg!');

This method doesn't allow the more powerful formatting options such as inline style, and removes any raw HTML.

h3. Doctypes

Currently, PHP Textile can target either XHTML or HTML5 output with XHTML being the default for backward compatibility. The targeted doctype can be changed through the constructor:

bc. $parser = new Textile('html5');
echo $parser->textileThis('HTML(HyperText Markup Language)");

In HTML5 mode, you'll get @abbr@ instead of @acronym@ and if you use alignment markers on your images you'll have extra classes placed on them instead of XHTML's @align@ attribute.

h3. Setting alternate glyphs

Textile's typographic substitutions can be overridden with the @setSymbol@ method. If you need to setup Textile to do non-standard substitutions, call @setSymbol@ before you parse the input with @textileThis@ or @textileRestricted@.

If you wanted to override the symbol output for the one-half typographic substitution from the standard @&#189;@ to something using the fraction-slash you could do it like this...

bc. $parser = new Textile();
$parser->setSymbol('half', '1&#8260;2');
echo $parser->textileThis('Hello [1/2] World!');

The symbol names you can pass to @setSymbol()@ can be found "here":https://github.com/textile/php-textile/blob/582fb7e2af83bb043fe6dd3846220796c814f999/classTextile.php#L468.

h3. Prefixing relative image paths

Setting an image path prefix might be useful if your application only allows users to reference images from a certain location like, say, an images directory. The prefix can be set with the @setRelativeImagePrefix()@ method:

bc. $parser = new Textile('html5');
$parser->setRelativeImagePrefix('user/uploads');
echo $parser->textileThis('!image.png!');

h2. Running tests

Included unit tests can be run with PHPunit:

bc. $ composer install --dev
$ ./vendor/bin/phpunit

Running tests requires PHP 5.3.3 and PCRE with PCRE_UTF8.

h2. Getting in contact

The Textile project welcomes constructive input and bug reports from users. You can contact us in several ways...

* "Open an issue":https://github.com/textile/php-textile/issues on the repository for a feature request or bug.
* If you are on IRC, feel free to drop into *#textile* on *freenode.net* ("webchat":http://webchat.freenode.net/?channels=#textile.)
* Use the generic "contact form":http://sitemonks.com/.
